group = 'io.github.spencerpark'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

wrapper {
    gradleVersion = '4.8.1'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile group: 'io.github.spencerpark', name: 'jupyter-jvm-basekernel', version: '2.2.4-SNAPSHOT'
    compile group: 'org.zeromq', name: 'jeromq', version: '0.4.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // ossrhUsername and ossrhPassword are defined in the global gradle.properties on the
            // machine uploading the artifacts (including the keys). If not present only `publish`
            // should fail, not `publishToMavenLocal`. Essentially defer the failure as long as possible.
            def ossrhUsername = project.findProperty('ossrhUsername')
            def ossrhPassword = project.findProperty('ossrhPassword')

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = 'Jupyter JVM Client'
                packaging = 'jar'
                description = 'A Java library for launching, connecting, and communicating with a Jupyter kernel.'
                url = 'https://github.com/SpencerPark/jupyter-jvm-client'

                scm {
                    url = 'https://github.com/SpencerPark/jupyter-jvm-client.git'
                    connection = 'scm:git:https://github.com/SpencerPark/jupyter-jvm-client.git'
                    developerConnection = 'scm:git:git@github.com:SpencerPark/jupyter-jvm-client.git'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'SpencerPark'
                        name = 'Spencer Park'
                        email = 'spinnr95@gmail.com'
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}